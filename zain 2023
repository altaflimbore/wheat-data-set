1.	Write automatic program for 0and X
import random

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def is_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_board_full(board):
    # Check if the board is full
    return all(board[i][j] != ' ' for i in range(3) for j in range(3))

def get_available_moves(board):
    # Get a list of available moves (empty cells)
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

def make_move(board, player, move):
    # Make a move on the board
    i, j = move
    board[i][j] = player

def get_user_move():
    # Get user's move
    while True:
        try:
            move = tuple(map(int, input("Enter your move (row and column, separated by space): ").split()))
            if 0 <= move[0] < 3 and 0 <= move[1] < 3:
                return move
            else:
                print("Invalid move. Try again.")
        except ValueError:
            print("Invalid input. Try again.")

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    user = 'X'
    computer = 'O'

    while True:
        print_board(board)

        # User's move
        user_move = get_user_move()
        make_move(board, user, user_move)

        # Check if user wins
        if is_winner(board, user):
            print_board(board)
            print("Congratulations! You win!")
            break

        # Check if the board is full
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        # Computer's move
        computer_move = random.choice(get_available_moves(board))
        make_move(board, computer, computer_move)

        # Check if computer wins
        if is_winner(board, computer):
            print_board(board)
            print("Sorry, you lose. Try again!")
            break

if __name__ == "__main__":
    main()

2.use heuristic search techniques to implement hill-climbing algorithm
3. constraint satisfaction problem for sudoku game
  def print_board(board):
    for row in board:
        print(" ".join(map(str, row)))

def is_valid_move(board, row, col, num):
    # Check if the move is valid in the current row and column
    if num in board[row] or num in [board[i][col] for i in range(9)]:
        return False

    # Check if the move is valid in the 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if board[i][j] == num:
                return False

    return True

def find_empty_location(board):
    # Find the first empty location (cell with 0)
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return i, j
    return None, None  # No empty location found, puzzle is solved

def solve_sudoku(board):
    row, col = find_empty_location(board)

    # If there is no empty location, the puzzle is solved
    if row is None:
        return True

    # Try placing digits 1 through 9 in the empty location
    for num in range(1, 10):
        if is_valid_move(board, row, col, num):
            board[row][col] = num

            # Recursively try to solve the remaining puzzle
            if solve_sudoku(board):
                return True

            # If placing num in the current location doesn't lead to a solution, backtrack
            board[row][col] = 0

    # No valid move, trigger backtracking
    return False

if __name__ == "__main__":
    # Example Sudoku puzzle (0 represents empty cells)
    sudoku_board = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ]

    print("Sudoku Puzzle:")
    print_board(sudoku_board)
    print("\nSolving...\n")

    if solve_sudoku(sudoku_board):
        print("Sudoku Solution:")
        print_board(sudoku_board)
    else:
        print("No solution exists.")

2*2
def print_board(board):
    for row in board:
        print(" ".join(map(str, row)))

def is_valid_move(board, row, col, num):
    # Check if the move is valid in the current row and column
    if num in board[row] or num in [board[i][col] for i in range(4)]:
        return False

    # Check if the move is valid in the 2x2 subgrid
    start_row, start_col = 2 * (row // 2), 2 * (col // 2)
    for i in range(start_row, start_row + 2):
        for j in range(start_col, start_col + 2):
            if board[i][j] == num:
                return False

    return True

def find_empty_location(board):
    # Find the first empty location (cell with 0)
    for i in range(4):
        for j in range(4):
            if board[i][j] == 0:
                return i, j
    return None, None  # No empty location found, puzzle is solved

def solve_sudoku(board):
    row, col = find_empty_location(board)

    # If there is no empty location, the puzzle is solved
    if row is None:
        return True

    # Try placing digits 1 through 4 in the empty location
    for num in range(1, 5):
        if is_valid_move(board, row, col, num):
            board[row][col] = num

            # Recursively try to solve the remaining puzzle
            if solve_sudoku(board):
                return True

            # If placing num in the current location doesn't lead to a solution, backtrack
            board[row][col] = 0

    # No valid move, trigger backtracking
    return False

if __name__ == "__main__":
    # Example 4x4 Sudoku puzzle (0 represents empty cells)
    sudoku_board = [
        [0, 0, 2, 1],
        [0, 1, 0, 0],
        [0, 0, 0, 0],
        [0, 2, 0, 0]
    ]

    print("Sudoku Puzzle:")
    print_board(sudoku_board)
    print("\nSolving...\n")

    if solve_sudoku(sudoku_board):
        print("Sudoku Solution:")
        print_board(sudoku_board)
    else:
        print("No solution exists.")
4.write a program to implement hill climbing algorithm
5.implement and compare different search algorithm such as A*,bffs,dfs on puzzle measure and compare the performance of algorithm in terms of time complexity and solution quality
 from queue import Queue, LifoQueue
import heapq
import time
import random

class PuzzleState:
    def __init__(self, state, parent=None, action=None):
        self.state = state
        self.parent = parent
        self.action = action
        self.cost = 0

def get_blank_position(state):
    for i in range(len(state)):
        for j in range(len(state[i])):
            if state[i][j] == 0:
                return i, j

def actions(state):
    i, j = get_blank_position(state)
    possible_actions = []

    if i > 0:
        possible_actions.append("UP")
    if i < len(state) - 1:
        possible_actions.append("DOWN")
    if j > 0:
        possible_actions.append("LEFT")
    if j < len(state[0]) - 1:
        possible_actions.append("RIGHT")

    return possible_actions

def result(state, action):
    i, j = get_blank_position(state)

    if action == "UP":
        state[i][j], state[i - 1][j] = state[i - 1][j], state[i][j]
    elif action == "DOWN":
        state[i][j], state[i + 1][j] = state[i + 1][j], state[i][j]
    elif action == "LEFT":
        state[i][j], state[i][j - 1] = state[i][j - 1], state[i][j]
    elif action == "RIGHT":
        state[i][j], state[i][j + 1] = state[i][j + 1], state[i][j]

def print_state(state):
    for row in state:
        print(row)
    print()

def is_goal(state, goal_state):
    return state == goal_state

def bfs(start_state, goal_state):
    start_time = time.time()
    explored = set()
    frontier = Queue()

    initial_node = PuzzleState(start_state)
    frontier.put(initial_node)

    while not frontier.empty():
        current_node = frontier.get()
        current_state = current_node.state

        if is_goal(current_state, goal_state):
            end_time = time.time()
            return current_node, end_time - start_time

        explored.add(tuple(map(tuple, current_state)))

        for action in actions(current_state):
            child_state = [row.copy() for row in current_state]
            result(child_state, action)

            if tuple(map(tuple, child_state)) not in explored:
                child_node = PuzzleState(child_state, current_node, action)
                frontier.put(child_node)

    return None, None

def dfs(start_state, goal_state):
    start_time = time.time()
    explored = set()
    frontier = LifoQueue()

    initial_node = PuzzleState(start_state)
    frontier.put(initial_node)

    while not frontier.empty():
        current_node = frontier.get()
        current_state = current_node.state

        if is_goal(current_state, goal_state):
            end_time = time.time()
            return current_node, end_time - start_time

        explored.add(tuple(map(tuple, current_state)))

        for action in actions(current_state):
            child_state = [row.copy() for row in current_state]
            result(child_state, action)

            if tuple(map(tuple, child_state)) not in explored:
                child_node = PuzzleState(child_state, current_node, action)
                frontier.put(child_node)

    return None, None

def heuristic(state, goal_state):
    # Manhattan distance heuristic
    total_distance = 0
    for i in range(len(state)):
        for j in range(len(state[i])):
            value = state[i][j]
            if value != 0:
                goal_i, goal_j = divmod(value - 1, len(state[i]))
                total_distance += abs(i - goal_i) + abs(j - goal_j)
    return total_distance

def astar(start_state, goal_state):
    start_time = time.time()
    explored = set()
    frontier = []
    heapq.heappush(frontier, (0, PuzzleState(start_state)))
    cost_so_far = {tuple(map(tuple, start_state)): 0}

    while frontier:
        _, current_node = heapq.heappop(frontier)
        current_state = current_node.state

        if is_goal(current_state, goal_state):
            end_time = time.time()
            return current_node, end_time - start_time

        explored.add(tuple(map(tuple, current_state)))

        for action in actions(current_state):
            child_state = [row.copy() for row in current_state]
            result(child_state, action)
            child_cost = current_node.cost + 1 + heuristic(child_state, goal_state)

            if tuple(map(tuple, child_state)) not in explored or child_cost < cost_so_far.get(tuple(map(tuple, child_state)), float('inf')):
                child_node = PuzzleState(child_state, current_node, action)
                child_node.cost = current_node.cost + 1
                cost_so_far[tuple(map(tuple, child_state))] = child_cost
                heapq.heappush(frontier, (child_cost, child_node))

    return None, None

def generate_puzzle(size):
    numbers = list(range(size * size))
    random.shuffle(numbers)
    puzzle = [numbers[i:i+size] for i in range(0, size*size, size)]
    return puzzle

def main():
    size = 3
    start_state = generate_puzzle(size)
    goal_state = generate_puzzle(size)

    print("Initial State:")
    print_state(start_state)
    print("Goal State:")
    print_state(goal_state)

    print("\nBFS:")
    bfs_solution, bfs_time = bfs(start_state, goal_state)
    if bfs_solution:
        print("Solution:")
        while bfs_solution:
            print_state(bfs_solution.state)
            bfs_solution = bfs_solution.parent
        print("Time:", bfs_time)
    else:
        print("No solution found.")

    print("\nDFS:")
    dfs_solution, dfs_time = dfs(start_state, goal_state)
    if dfs_solution:
        print("Solution:")
        while dfs_solution:
            print_state(dfs_solution.state)
            dfs_solution = dfs_solution.parent
        print("Time:", dfs_time)
    else:
        print("No solution found.")

    print("\nA*:")
    astar_solution, astar_time = astar(start_state, goal_state)
    if astar_solution:
        print("Solution:")
        while astar_solution:
            print_state(astar_solution.state)
            astar_solution = astar_solution.parent
        print("Time:", astar_time)
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
6.implement goal stack planning for block world problem
7.develop a chatbot in field of medical system
8.expert system for financial planning 
class FinancialExpertSystem:
    def __init__(self):
        self.income = 0
        self.expenses = 0
        self.savings = 0

    def get_user_input(self):
        try:
            self.income = float(input("Enter your monthly income: "))
            self.expenses = float(input("Enter your monthly expenses: "))
        except ValueError:
            print("Invalid input. Please enter valid numbers.")
            self.get_user_input()

    def calculate_savings(self):
        self.savings = self.income - self.expenses

    def analyze_situation(self):
        if self.savings < 0:
            print("You are spending more than you earn. Consider reducing expenses.")
        elif 0 <= self.savings < self.income * 0.1:
            print("Your savings are below 10% of your income. Consider saving more.")
        elif self.income * 0.1 <= self.savings < self.income * 0.5:
            print("Your savings are within a healthy range. Keep it up!")
        else:
            print("Excellent job! Your savings are more than 50% of your income.")

def main():
    print("Welcome to the Financial Planning Expert System")
    financial_expert = FinancialExpertSystem()

    financial_expert.get_user_input()
    financial_expert.calculate_savings()
    financial_expert.analyze_situation()

if __name__ == "__main__":
    main()
9.csp for nqueen problem
def print_solution(board):
    for row in board:
        print(" ".join("Q" if cell else "." for cell in row))
    print()

def is_safe(board, row, col):
    # Check for queens in the same column
    for i in range(row):
        if board[i][col]:
            return False

    # Check for queens in the left upper diagonal
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i][j]:
            return False

    # Check for queens in the left lower diagonal
    for i, j in zip(range(row+1, len(board)), range(col-1, -1, -1)):
        if board[i][j]:
            return False

    return True

def solve_n_queens(board, row):
    if row == len(board):
        # All queens are placed, print the solution
        print_solution(board)
        return

    for col in range(len(board)):
        if is_safe(board, row, col):
            # Place queen and move to the next row
            board[row][col] = True
            solve_n_queens(board, row + 1)
            # Backtrack and try the next column
            board[row][col] = False

def n_queens(n):
    # Initialize the chessboard
    board = [[False] * n for _ in range(n)]
    solve_n_queens(board, 0)

if __name__ == "__main__":
    n_queens(4)
10.use heuristic search technique to implement hill climbing algorithm
import random

def initial_state(n):
    """Generate a random initial state for the N-Queens problem."""
    return [random.randint(0, n-1) for _ in range(n)]

def attacking_pairs(state):
    """Calculate the number of attacking pairs in the given state."""
    n = len(state)
    pairs = 0

    for i in range(n):
        for j in range(i+1, n):
            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):
                pairs += 1

    return pairs

def hill_climbing(n, max_iter=1000):
    """Solve the N-Queens problem using Hill Climbing."""
    current_state = initial_state(n)

    for _ in range(max_iter):
        if attacking_pairs(current_state) == 0:
            # Goal state found
            return current_state

        neighbors = []

        for col in range(n):
            for row in range(n):
                if current_state[col] != row:
                    neighbor = list(current_state)
                    neighbor[col] = row
                    neighbors.append(neighbor)

        neighbors.sort(key=attacking_pairs)
        
        if attacking_pairs(neighbors[0]) >= attacking_pairs(current_state):
            # No better neighbor found
            break

        current_state = neighbors[0]

    return current_state

def print_board(state):
    """Print the chessboard."""
    n = len(state)
    for row in range(n):
        line = ""
        for col in range(n):
            line += "Q" if state[col] == row else "."
        print(line)

if __name__ == "__main__":
    n = 8
    final_state = hill_climbing(n)

    print("Final State:")
    print_board(final_state)
11.csp for cossword problem
  1
from constraint import Problem, AllDifferentConstraint

def create_crossword_csp(grid_size, words):
    problem = Problem()

    # Variables: one for each cell in the grid
    variables = [(i, j) for i in range(grid_size) for j in range(grid_size)]
    for variable in variables:
        problem.addVariable(variable, words)

    # Constraints: words in rows and columns should be different
    for i in range(grid_size):
        row_variables = [(i, j) for j in range(grid_size)]
        col_variables = [(j, i) for j in range(grid_size)]
        problem.addConstraint(AllDifferentConstraint(), row_variables)
        problem.addConstraint(AllDifferentConstraint(), col_variables)

    return problem

def print_solution(solution, grid_size):
    for i in range(grid_size):
        row = [solution[(i, j)] for j in range(grid_size)]
        print(" ".join(row))

if __name__ == "__main__":
    grid_size = 4
    words = ["cat", "dog", "bat", "rat"]

    crossword_problem = create_crossword_csp(grid_size, words)
    solutions = crossword_problem.getSolutions()

    if solutions:
        print("One possible crossword solution:")
        print_solution(solutions[0], grid_size)
    else:
        print("No solution found.")
pip install python-constraint
2
def is_valid_placement(grid, word, position, direction):
    row, col = position
    word_len = len(word)

    if direction == "across":
        if col + word_len > len(grid[0]):
            return False
        for i in range(word_len):
            if grid[row][col + i] != '.' and grid[row][col + i] != word[i]:
                return False

    elif direction == "down":
        if row + word_len > len(grid):
            return False
        for i in range(word_len):
            if grid[row + i][col] != '.' and grid[row + i][col] != word[i]:
                return False

    return True

def place_word(grid, word, position, direction):
    row, col = position

    if direction == "across":
        for i in range(len(word)):
            grid[row][col + i] = word[i]

    elif direction == "down":
        for i in range(len(word)):
            grid[row + i][col] = word[i]

def crossword_puzzle(words):
    grid_size = 4
    grid = [['.' for _ in range(grid_size)] for _ in range(grid_size)]

    for word in words:
        placed = False
        while not placed:
            direction = "across" if len(word) % 2 == 0 else "down"
            position = (random.randint(0, grid_size - 1), random.randint(0, grid_size - 1))

            if is_valid_placement(grid, word, position, direction):
                place_word(grid, word, position, direction)
                placed = True

    return grid

def print_crossword(grid):
    for row in grid:
        print(" ".join(row))

if __name__ == "__main__":
    import random

    words = ["cat", "dog", "bat", "rat"]
    crossword_grid = crossword_puzzle(words)

    print("Crossword Puzzle:")
    print_crossword(crossword_grid)
12.develop ai chat bot in field of food orderings system
import random

class FoodOrderingChatbot:
    def __init__(self):
        self.menu = {
            "Burger": 5.99,
            "Pizza": 8.99,
            "Salad": 4.99,
            "Drink": 1.99
        }
        self.cart = []

    def display_menu(self):
        print("Menu:")
        for item, price in self.menu.items():
            print(f"{item}: ${price}")

    def add_to_cart(self, item):
        if item in self.menu:
            self.cart.append((item, self.menu[item]))
            print(f"{item} added to your cart.")
        else:
            print("Sorry, we don't have that item on the menu.")

    def view_cart(self):
        if not self.cart:
            print("Your cart is empty.")
        else:
            print("Your Cart:")
            for item, price in self.cart:
                print(f"{item}: ${price}")

    def place_order(self):
        if not self.cart:
            print("Your cart is empty. Please add items before placing an order.")
        else:
            total_price = sum(price for _, price in self.cart)
            print(f"Total Price: ${total_price}")
            print("Thank you for placing your order! Your food will be delivered soon.")
            self.cart = []  # Clear the cart after placing the order

    def chat(self):
        print("Welcome to Food Ordering Chatbot!")

        while True:
            user_input = input("You: ").lower()

            if "menu" in user_input:
                self.display_menu()
            elif "add" in user_input:
                item = user_input.split("add")[1].strip()
                self.add_to_cart(item)
            elif "cart" in user_input:
                self.view_cart()
            elif "order" in user_input:
                self.place_order()
            elif "exit" in user_input:
                print("Thank you for using Food Ordering Chatbot. Goodbye!")
                break
            else:
                responses = ["I'm sorry, I didn't understand that.", "Can you please rephrase?", "I'm just a simple chatbot for food orders."]
                print(random.choice(responses))

if __name__ == "__main__":
    chatbot = FoodOrderingChatbot()
    chatbot.chat()
13.build an expert system for traffic control system
class TrafficControlExpertSystem:
    def __init__(self):
        self.weather_conditions = ["clear", "rainy", "snowy"]
        self.traffic_conditions = ["light", "moderate", "heavy"]

    def get_traffic_signal_state(self, weather, traffic):
        if weather not in self.weather_conditions or traffic not in self.traffic_conditions:
            return "Invalid input. Please provide valid weather and traffic conditions."

        if weather == "clear":
            if traffic == "light":
                return "Green signal"
            elif traffic == "moderate":
                return "Yellow signal"
            elif traffic == "heavy":
                return "Red signal"
        elif weather == "rainy":
            if traffic == "light":
                return "Yellow signal"
            elif traffic == "moderate" or traffic == "heavy":
                return "Red signal"
        elif weather == "snowy":
            if traffic == "light" or traffic == "moderate":
                return "Yellow signal"
            elif traffic == "heavy":
                return "Red signal"

if __name__ == "__main__":
    traffic_system = TrafficControlExpertSystem()

    # Example usage
    weather_condition = input("Enter weather condition (clear, rainy, snowy): ").lower()
    traffic_condition = input("Enter traffic condition (light, moderate, heavy): ").lower()

    signal_state = traffic_system.get_traffic_signal_state(weather_condition, traffic_condition)
    print(f"Traffic Signal State: {signal_state}")
13.chatbot for education system
import random

class EducationChatbot:
    def __init__(self):
        self.courses = {
            "math": "Mathematics",
            "sci": "Science",
            "eng": "English",
            "hist": "History",
            "comp": "Computer Science"
        }
        self.schedule = {
            "mon": {"math": "8:00 AM", "sci": "9:30 AM", "eng": "11:00 AM"},
            "tue": {"hist": "8:30 AM", "comp": "10:00 AM"}
            # Add more days and courses as needed
        }

    def get_course_info(self, course_code):
        if course_code in self.courses:
            return f"{self.courses[course_code]} is a great course!"
        else:
            return "Sorry, I don't have information about that course."

    def get_schedule(self, day):
        if day in self.schedule:
            return self.schedule[day]
        else:
            return "Sorry, I don't have a schedule for that day."

    def chat(self):
        print("Welcome to the Education Chatbot!")

        while True:
            user_input = input("You: ").lower()

            if "course" in user_input:
                course_code = input("Enter course code: ").lower()
                response = self.get_course_info(course_code)
            elif "schedule" in user_input:
                day = input("Enter day (mon, tue, etc.): ").lower()
                response = self.get_schedule(day)
            elif "exit" in user_input:
                print("Thank you for using the Education Chatbot. Goodbye!")
                break
            else:
                responses = ["I'm sorry, I didn't understand that.", "Can you please rephrase?", "I'm just a simple chatbot for education."]
                response = random.choice(responses)

            print(response)

if __name__ == "__main__":
    chatbot = EducationChatbot()
    chatbot.chat()
